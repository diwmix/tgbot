from aiogram import Dispatcher, Bot, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
import random
import json
from datetime import datetime

from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup
)

from config import TOKEN

with open('result.json', 'r', encoding='utf-8') as file:
    stickers = json.load(file)

telegram_bot = Bot(TOKEN)
dispatcher = Dispatcher(telegram_bot, storage=MemoryStorage())

start_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton('–ö–∞—Ä—Ç–∞ –î–Ω—è ‚òÄÔ∏è'), KeyboardButton('–¢–∞–∫ —á–∏ –Ω—ñ üåì')]],
    resize_keyboard=True
)


class Form(StatesGroup):
    text = State()

# –ü—Ä–∏ –°—Ç–∞—Ä—Ç—ñ
@dispatcher.message_handler(commands=['start'])
async def start_handler(message: Message) -> None:
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=start_keyboard)


# –ü—Ä–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—ñ –Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏
@dispatcher.message_handler(Text(equals='–°–∫–∞—Å—É–≤–∞—Ç–∏ üö´', ignore_case=True), state='*')
async def cancel_state(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()

    if current_state is None:
        return

    await state.finish()
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=start_keyboard)


# –ö–∞—Ä—Ç–∞ –¥–Ω—è - —Ç–∞–π–º–µ—Ä
def is_timestamp_relevant(
        timestamp: float,
        now: datetime,
        seconds: int = 86400
) -> None:

    if not timestamp:
        return True

    return (now - datetime.fromtimestamp(timestamp)).total_seconds() > seconds


# –ü—Ä–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è
@dispatcher.message_handler(commands=['Card_Of_The_Day'])
@dispatcher.message_handler(Text(equals='–ö–∞—Ä—Ç–∞ –î–Ω—è ‚òÄÔ∏è'))
async def card_of_day(message: Message, state: FSMContext) -> None:

    async with state.proxy() as data:
        last_ping = data.get('last_used')
        now = datetime.now()

        if not is_timestamp_relevant(last_ping, now):
            return await message.answer('–ù–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥–∏–Ω–∏! üïë')

        data['last_used'] = now.timestamp()

    random_sticker = random.choice(stickers)

    with open(random_sticker['sticker_path'], 'rb') as sticker:
        await message.answer_sticker(sticker)

    await message.answer(f"<b>–ö–∞—Ä—Ç–∞ –¥–Ω—è:</b>\n\n{random_sticker['sticker_text']}", parse_mode='html')

# –ü—Ä–∏ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—ñ –Ω–∞ "—Ç–∞–∫ —á–∏ –Ω—ñ"
@dispatcher.message_handler(commands=['Yes_Or_Not'])
@dispatcher.message_handler(Text(equals='–¢–∞–∫ —á–∏ –Ω—ñ üåì', ignore_case=True))
async def button_2_pattern(message: Message) -> None:
    await Form.text.set()

    await message.answer(
        '<b>–ó–∞–¥–∞–π –ü–∏—Ç–∞–Ω–Ω—è!</b>üí°\n(–ü–∏—Ç–∞–Ω–Ω—è —Ç—Ä–µ–±–∞ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ —Ç–∞–∫, —â–æ–± –Ω–∞ –Ω—å–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–ª–æ –¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å "–¢–∞–∫" –∞–±–æ "–ù—ñ".',
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton('–°–∫–∞—Å—É–≤–∞—Ç–∏ üö´')]],
            resize_keyboard=True
        ), parse_mode='html'
    )


@dispatcher.message_handler(state=Form.text)
async def text_state(message: Message, state: FSMContext) -> None:
    await state.finish()
    random_sticker = random.choice(stickers)

    with open(random_sticker['sticker_path'], 'rb') as sticker:
        await message.answer_sticker(sticker)


    await message.answer(
        f"<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> \n\n{message.text}\n\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n\n{random_sticker['card_value']}" ,
        parse_mode='html',
        reply_markup=start_keyboard
    )


if __name__ == '__main__':
    executor.start_polling(dispatcher)